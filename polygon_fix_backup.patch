diff --git a/webimar-react/src/components/DikiliAlanKontrol.tsx b/webimar-react/src/components/DikiliAlanKontrol.tsx
index 614a0ec..3cf20f8 100644
--- a/webimar-react/src/components/DikiliAlanKontrol.tsx
+++ b/webimar-react/src/components/DikiliAlanKontrol.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect, useMemo } from 'react';
+import React, { useState, useEffect, useMemo, useCallback } from 'react';
 import styled from 'styled-components';
 import { MapContainer, TileLayer } from 'react-leaflet';
 import PolygonDrawer, { DrawnPolygon } from './Map/PolygonDrawer';
@@ -383,10 +383,7 @@ const DikiliAlanKontrol: React.FC<DikiliAlanKontrolProps> = ({ isOpen, onClose,
   const [editingIndex, setEditingIndex] = useState<number | null>(null);
   const [editingAgacSayisi, setEditingAgacSayisi] = useState<number>(0);
 
-  // Debug: State değişikliklerini izle
-  useEffect(() => {
-    console.log('📊 State değişti:', { drawingMode, isDrawing, drawingTrigger, stopTrigger });
-  }, [drawingMode, isDrawing, drawingTrigger, stopTrigger]);
+  // Removed debug state change log to reduce console noise
 
   // Ağaç verilerini yükle
   useEffect(() => {
@@ -555,7 +552,7 @@ const DikiliAlanKontrol: React.FC<DikiliAlanKontrolProps> = ({ isOpen, onClose,
 
   const stopDrawingMode = () => {
     console.log('🛑 stopDrawingMode çağrıldı, mevcut state:', { drawingMode, isDrawing });
-    console.trace('🔍 stopDrawingMode çağrı yığını:'); // Call stack'i göster
+    console.log('🔍 Event target:', document.activeElement); // Hangi element tıklandı
     setStopTrigger(Date.now()); // Timestamp kullan
     setDrawingMode(null);
     setIsDrawing(false);
@@ -587,32 +584,28 @@ const DikiliAlanKontrol: React.FC<DikiliAlanKontrolProps> = ({ isOpen, onClose,
     }
   };
 
-  const handlePolygonEdit = (polygon: DrawnPolygon, index: number) => {
-    console.log('✏️ Polygon düzenlendi:', { polygon, index, currentStates: { tarlaAlani, dikiliAlan } });
+  const handlePolygonEdit = useCallback((polygon: DrawnPolygon, index: number) => {
+    const newArea = Math.round(polygon.area);
     
     // Mevcut polygon yapısına göre index'i belirle
     if (index === 0 && tarlaPolygon && !dikiliPolygon) {
       // Sadece tarla varsa, index 0 = tarla
       setTarlaPolygon(polygon);
-      setTarlaAlani(Math.round(polygon.area));
-      console.log('🟤 Tarla alanı güncellendi:', Math.round(polygon.area));
+      setTarlaAlani(newArea);
     } else if (index === 0 && tarlaPolygon && dikiliPolygon) {
       // İkisi de varsa, index 0 = tarla
       setTarlaPolygon(polygon);
-      setTarlaAlani(Math.round(polygon.area));
-      console.log('🟤 Tarla alanı güncellendi (ikisi de var):', Math.round(polygon.area));
+      setTarlaAlani(newArea);
     } else if (index === 1 && tarlaPolygon && dikiliPolygon) {
       // İkisi de varsa, index 1 = dikili
       setDikiliPolygon(polygon);
-      setDikiliAlan(Math.round(polygon.area));
-      console.log('🟢 Dikili alanı güncellendi:', Math.round(polygon.area));
+      setDikiliAlan(newArea);
     } else if (index === 0 && !tarlaPolygon && dikiliPolygon) {
       // Sadece dikili varsa, index 0 = dikili
       setDikiliPolygon(polygon);
-      setDikiliAlan(Math.round(polygon.area));
-      console.log('🟢 Dikili alanı güncellendi (sadece dikili):', Math.round(polygon.area));
+      setDikiliAlan(newArea);
     }
-  };
+  }, [tarlaPolygon, dikiliPolygon]);
 
   // Drawing state change handler'ı kaldırıldı çünkü infinite loop yaratıyordu
 
@@ -1338,9 +1331,11 @@ const DikiliAlanKontrol: React.FC<DikiliAlanKontrolProps> = ({ isOpen, onClose,
                       </div>
                       {tarlaPolygon && (
                         <button
-                          onClick={() => {
+                          onClick={(e) => {
+                            e.stopPropagation(); // Event bubbling'i durdur
+                            e.preventDefault(); // Default davranışı durdur
+                            console.log('🎯 Tarla edit butonu tıklandı!', e);
                             // Tarla edit modu - index 0 (tarla her zaman ilk sırada)
-                            setDrawingMode('tarla');
                             setEditTrigger({ timestamp: Date.now(), polygonIndex: 0 });
                           }}
                           style={{
@@ -1382,9 +1377,11 @@ const DikiliAlanKontrol: React.FC<DikiliAlanKontrolProps> = ({ isOpen, onClose,
                       </div>
                       {dikiliPolygon && (
                         <button
-                          onClick={() => {
+                          onClick={(e) => {
+                            e.stopPropagation(); // Event bubbling'i durdur
+                            e.preventDefault(); // Default davranışı durdur
+                            console.log('🎯 Dikili edit butonu tıklandı!', e);
                             // Dikili edit modu - index 1 (dikili ikinci sırada) veya 0 (eğer tarla yoksa)
-                            setDrawingMode('dikili');
                             const dikiliIndex = tarlaPolygon ? 1 : 0;
                             setEditTrigger({ timestamp: Date.now(), polygonIndex: dikiliIndex });
                           }}
diff --git a/webimar-react/src/components/Map/PolygonDrawer.tsx b/webimar-react/src/components/Map/PolygonDrawer.tsx
index e5fa010..b76e5b1 100644
--- a/webimar-react/src/components/Map/PolygonDrawer.tsx
+++ b/webimar-react/src/components/Map/PolygonDrawer.tsx
@@ -4,6 +4,13 @@ import * as turf from '@turf/turf';
 import { useMap, useMapEvents } from 'react-leaflet'; // useMapEvents eklendi, useCallback eklendi
 import styled from 'styled-components';
 
+// Global window interface extension
+declare global {
+  interface Window {
+    showAllHiddenPolygons?: () => void;
+  }
+}
+
 // Global CSS for polygon tooltips
 const GlobalStyle = `
   .polygon-tooltip {
@@ -408,23 +415,8 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
     
     // Edit özelliği etkinse, polygon'a click event ekle
     if (enableEdit) {
-      polygon.on('click', (e) => {
-        e.originalEvent?.stopPropagation();
-        
-        // Hangi polygon'a tıklandığını bul
-        const clickedIndex = existingPolygons.findIndex(item => 
-          item.polygon.points.length === points.length &&
-          item.polygon.points.every((point, index) => 
-            Math.abs(point.lat - points[index].lat) < 0.000001 &&
-            Math.abs(point.lng - points[index].lng) < 0.000001
-          )
-        );
-        
-        if (clickedIndex !== -1 && !isDrawing) {
-          console.log('📝 Polygon edit için seçildi:', clickedIndex);
-          startEditMode(clickedIndex);
-        }
-      });
+      // Polygon click event'i kaldırıldı - sadece edit butonları kullanılacak
+      // polygon.on('click', (e) => { ... });
       
       // Edit modunda olduğunu belirten stil
       polygon.on('mouseover', () => {
@@ -456,11 +448,19 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
 
   // Edit Modu Fonksiyonları
   const startEditMode = (polygonIndex: number) => {
+    console.log('🎯 startEditMode çağrıldı, index:', polygonIndex);
+    
     if (isDrawing) {
       alert('Önce çizim modunu durdurun!');
       return;
     }
     
+    // Eğer zaten edit modundaysak, önceki edit modunu durdur
+    if (isEditing && editingPolygonIndex !== polygonIndex) {
+      console.log('🔄 Önceki edit modu durduruluyor, index:', editingPolygonIndex);
+      stopEditMode();
+    }
+    
     if (!existingPolygons[polygonIndex]) {
       console.error('Edit edilecek polygon bulunamadı:', polygonIndex);
       return;
@@ -475,13 +475,32 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
     // Ref'i hemen güncelle
     editingPointsRef.current = [...polygonPoints];
     
-    // Edit için draggable markerları oluştur - polygonIndex'i parametre olarak geç
-    createEditableMarkers(polygonPoints, polygonIndex);
+    // Edit için draggable markerları oluştur - setTimeout ile async yap
+    setTimeout(() => {
+      createEditableMarkers(polygonPoints, polygonIndex);
+    }, 50); // 50ms delay ile initialization conflict'i önle
   };
 
   const stopEditMode = () => {
+    console.log('🛑 stopEditMode çağrıldı');
     const currentEditingIndex = editingPolygonIndex;
     
+    // İlk olarak tüm edit-related timeout ve ref'leri temizle
+    if (throttledVisualUpdate.current) {
+      clearTimeout(throttledVisualUpdate.current);
+      throttledVisualUpdate.current = null;
+    }
+    
+    if (dragThrottleRef.current) {
+      clearTimeout(dragThrottleRef.current);
+      dragThrottleRef.current = null;
+    }
+    
+    if (parentNotificationTimeout.current) {
+      clearTimeout(parentNotificationTimeout.current);
+      parentNotificationTimeout.current = null;
+    }
+    
     setIsEditing(false);
     isEditingRef.current = false; // Ref'i de güncelle
     setEditingPolygonIndex(-1);
@@ -493,44 +512,65 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
     // Edit markerlarını temizle
     clearEditMarkers();
     
-    // Asıl polygon'u tekrar görünür hale getir
+    // Asıl polygon'u tekrar görünür hale getir - ID-bazlı matching kullan
     if (completedPolygonsLayerRef.current && currentEditingIndex >= 0 && existingPolygons[currentEditingIndex]) {
       const targetPolygon = existingPolygons[currentEditingIndex];
       const originalColor = targetPolygon.color;
+      const targetId = targetPolygon.id;
       
-      // Tüm layer'ları kontrol et ve doğru polygon'u bul
+      console.log('🔍 stopEditMode: Polygon geri yükleniyor, hedef ID:', targetId, 'renk:', originalColor);
+      
+      // ID-bazlı matching ile doğru polygon'u bul
       completedPolygonsLayerRef.current.eachLayer((layer) => {
-        const polygon = layer as L.Polygon;
-        if (polygon && polygon.getLatLngs) {
-          const layerLatLngs = polygon.getLatLngs()[0] as L.LatLng[];
+        const polygon = layer as L.Polygon & { options?: any };
+        
+        if (polygon && polygon.options && polygon.options.polygonId === targetId) {
+          // Bu doğru polygon, tekrar görünür yap
+          polygon.setStyle({ 
+            opacity: 0.8, 
+            fillOpacity: 0.3,
+            color: originalColor,
+            fillColor: originalColor 
+          });
+          console.log('✅ stopEditMode: Polygon başarıyla geri yüklendi:', targetPolygon.name, 'ID:', targetId);
+          return; // Layer bulundu, döngüyü bitir
+        }
+      });
+      
+      // Güvenlik kontrolü: Eğer polygon bulunamazsa fallback mekanizma
+      setTimeout(() => {
+        if (completedPolygonsLayerRef.current) {
+          let found = false;
+          completedPolygonsLayerRef.current.eachLayer((layer) => {
+            const polygon = layer as L.Polygon & { options?: any };
+            if (polygon && polygon.options && polygon.options.polygonId === targetId) {
+              found = true;
+            }
+          });
           
-          // Layer'ın koordinatlarını targetPolygon ile karşılaştır
-          if (layerLatLngs.length === targetPolygon.polygon.points.length) {
-            const matches = layerLatLngs.every((latLng, idx) => {
-              const point = targetPolygon.polygon.points[idx];
-              return Math.abs(latLng.lat - point.lat) < 0.000001 && 
-                     Math.abs(latLng.lng - point.lng) < 0.000001;
-            });
-            
-            if (matches) {
-              // Bu doğru polygon, tekrar görünür yap
-              polygon.setStyle({ 
-                opacity: 0.8, 
-                fillOpacity: 0.3,
-                color: originalColor,
-                fillColor: originalColor 
-              });
-              console.log('🔓 Edit tamamlandı, polygon görünür yapıldı:', targetPolygon.name);
+          if (!found) {
+            console.warn('⚠️ stopEditMode: Polygon ID ile bulunamadı, fallback mekanizma çalıştırılıyor');
+            // Fallback olarak tüm gizli polygonları göster
+            if (window.showAllHiddenPolygons) {
+              window.showAllHiddenPolygons();
             }
           }
         }
-      });
+      }, 100);
     }
   };
 
   const createEditableMarkers = (points: PolygonPoint[], polygonIndex: number) => {
+    console.log('🎯 createEditableMarkers çağrıldı:', { points: points.length, polygonIndex, isEditing: isEditingRef.current });
+    
     if (!editLayerRef.current) return;
     
+    // Edit modunda değilsek marker oluşturma
+    if (!isEditingRef.current) {
+      console.log('⚠️ createEditableMarkers: Edit modunda değil, iptal ediliyor');
+      return;
+    }
+    
     // editingPointsRef'i güncelle
     editingPointsRef.current = [...points];
     
@@ -558,6 +598,12 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
       
       // Marker sürüklendiğinde polygon'u güncelle - sadece visual update
       marker.on('drag', (e) => {
+        // Edit modunda değilsek hiçbir şey yapma
+        if (!isEditingRef.current) {
+          console.log('⚠️ Drag event: Edit modunda değil, iptal ediliyor');
+          return;
+        }
+        
         const newLatlng = (e.target as L.Marker).getLatLng();
         
         // Önceki throttle'ı temizle
@@ -577,6 +623,12 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
       
       // Drag end'de parent'a notify et (setTimeout ile async yapıyoruz)
       marker.on('dragend', (e) => {
+        // Edit modunda değilsek hiçbir şey yapma
+        if (!isEditingRef.current) {
+          console.log('⚠️ Dragend event: Edit modunda değil, iptal ediliyor');
+          return;
+        }
+        
         const newLatlng = (e.target as L.Marker).getLatLng();
         // setState in render hatasını önlemek için setTimeout kullan
         setTimeout(() => {
@@ -657,39 +709,41 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
   }, [isEditing]);
   
   const performVisualUpdate = (points: PolygonPoint[], polygonIndex: number) => {
+    // Birden fazla güvenlik kontrolü ekle
     if (!editLayerRef.current || points.length < 3) {
       return;
     }
     
-    // Tekrar edit modu kontrolü - güvenlik için
-    if (!isEditingRef.current) {
+    // Edit modunda değilsek hiçbir şey yapma
+    if (!isEditingRef.current || !isEditing) {
+      console.log('⚠️ performVisualUpdate: Edit modunda değil, iptal ediliyor');
+      return;
+    }
+    
+    // Geçerli bir polygon index'i mi?
+    if (polygonIndex < 0 || !existingPolygons[polygonIndex]) {
+      console.log('⚠️ performVisualUpdate: Geçersiz polygon index:', polygonIndex);
       return;
     }
     
-    // Asıl polygon'u gizle - existingPolygons dizisinden doğru polygon'u bul
+    console.log('🔄 performVisualUpdate çağrıldı, polygon:', existingPolygons[polygonIndex]?.name);
+    
+    // Asıl polygon'u gizle - ID-bazlı matching kullan
     if (completedPolygonsLayerRef.current && existingPolygons[polygonIndex]) {
       const targetPolygon = existingPolygons[polygonIndex];
+      const targetId = targetPolygon.id;
+      
+      console.log('🔍 performVisualUpdate: Polygon gizleniyor, hedef ID:', targetId);
       
-      // Tüm layer'ları kontrol et ve doğru polygon'u bul
+      // ID-bazlı matching ile doğru polygon'u bul ve gizle
       completedPolygonsLayerRef.current.eachLayer((layer) => {
-        const polygon = layer as L.Polygon;
-        if (polygon && polygon.getLatLngs) {
-          const layerLatLngs = polygon.getLatLngs()[0] as L.LatLng[];
-          
-          // Layer'ın koordinatlarını targetPolygon ile karşılaştır
-          if (layerLatLngs.length === targetPolygon.polygon.points.length) {
-            const matches = layerLatLngs.every((latLng, idx) => {
-              const point = targetPolygon.polygon.points[idx];
-              return Math.abs(latLng.lat - point.lat) < 0.000001 && 
-                     Math.abs(latLng.lng - point.lng) < 0.000001;
-            });
-            
-            if (matches) {
-              // Bu doğru polygon, gizle
-              polygon.setStyle({ opacity: 0, fillOpacity: 0 });
-              console.log('🔒 Edit için polygon gizlendi:', targetPolygon.name);
-            }
-          }
+        const polygon = layer as L.Polygon & { options?: any };
+        
+        if (polygon && polygon.options && polygon.options.polygonId === targetId) {
+          // Bu doğru polygon, gizle
+          polygon.setStyle({ opacity: 0, fillOpacity: 0 });
+          console.log('✅ performVisualUpdate: Polygon başarıyla gizlendi:', targetPolygon.name, 'ID:', targetId);
+          return; // Layer bulundu, döngüyü bitir
         }
       });
     }
@@ -950,11 +1004,33 @@ const PolygonDrawer: React.FC<PolygonDrawerProps> = ({
     }
   }, [externalClearTrigger]);
 
+  const lastEditTriggerRef = useRef<number>(0);
+
   useEffect(() => {
-    if (externalEditTrigger.timestamp > 0 && existingPolygons.length > 0 && externalEditTrigger.polygonIndex >= 0) {
-      startEditMode(externalEditTrigger.polygonIndex);
+    // Sadece timestamp gerçekten değiştiyse ve 0'dan büyükse çalıştır
+    if (externalEditTrigger.timestamp > lastEditTriggerRef.current && 
+        externalEditTrigger.timestamp > 0 && 
+        externalEditTrigger.polygonIndex >= 0) {
+      
+      console.log('🔍 Edit trigger detayları:', {
+        triggerTimestamp: externalEditTrigger.timestamp,
+        lastTimestamp: lastEditTriggerRef.current,
+        polygonIndex: externalEditTrigger.polygonIndex,
+        existingPolygonsLength: existingPolygons.length,
+        isDrawing,
+        isEditing
+      });
+      
+      // Polygon var mı kontrol et
+      if (existingPolygons && existingPolygons.length > externalEditTrigger.polygonIndex) {
+        console.log('🎯 Edit trigger tetiklendi:', externalEditTrigger);
+        startEditMode(externalEditTrigger.polygonIndex);
+        lastEditTriggerRef.current = externalEditTrigger.timestamp;
+      } else {
+        console.log('❌ Edit trigger: Polygon bulunamadı!');
+      }
     }
-  }, [externalEditTrigger]);
+  }, [externalEditTrigger.timestamp, externalEditTrigger.polygonIndex]);
 
   // Help mesajını isDrawing state'ine göre yönet
   useEffect(() => {
