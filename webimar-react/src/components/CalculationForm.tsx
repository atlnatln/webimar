import React, { useState, useEffect } from 'react';
import { DetailedCalculationInput, CalculationResult, StructureType } from '../types';
import { apiService } from '../services/api';
import { useStructureTypes } from '../contexts/StructureTypesContext';
import AlanKontrol from './AlanKontrol';
import BagEviCalculator from '../utils/bagEviCalculator';

// Ayrƒ±lmƒ±≈ü bile≈üen ve stil import'larƒ±
import SmartDetectionFeedback from './CalculationForm/SmartDetectionFeedback';
import FormField from './CalculationForm/FormField';
import AlanKontrolButtons from './CalculationForm/AlanKontrolButtons';
import FormSectionComponent from './CalculationForm/FormSectionComponent';
import BagEviFormFields from './CalculationForm/BagEviFormFields';
import { FormValidator } from './CalculationForm/FormValidator';
import { useTypewriter } from './CalculationForm/useTypewriter';
import {
  FormContainer,
  FormTitle,
  FormContent,
  FormGrid,
  FormGroup,
  Label,
  SubmitButton,
  ErrorMessage,
  RequiredIndicator,
  AnimatedSelectContainer,
  AnimatedSelect,
  TypewriterPlaceholder
} from './CalculationForm/styles';

// Backend constants.py ile senkronize yapƒ± t√ºr√º labels - artƒ±k types dosyasƒ±ndan import ediliyor

// Arazi tipi interface'i API'den gelen data i√ßin
interface AraziTipi {
  id: number;
  ad: string;
}

interface CalculationFormComponentProps {
  calculationType: StructureType;
  onResult: (result: CalculationResult) => void;
  onCalculationStart: () => void;
  selectedCoordinate?: { lat: number; lng: number } | null;
  onAraziVasfiChange?: (araziVasfi: string) => void;
  emsalTuru?: string; // Se√ßili emsal t√ºr√º
  onEmsalTuruChange?: (emsalTuru: string) => void; // Emsal t√ºr√º deƒüi≈ütiƒüinde √ßaƒürƒ±lacak fonksiyon
}

const CalculationForm: React.FC<CalculationFormComponentProps> = ({
  calculationType,
  onResult,
  onCalculationStart,
  selectedCoordinate,
  onAraziVasfiChange,
  emsalTuru,
  onEmsalTuruChange
}) => {
  const { structureTypeLabels } = useStructureTypes();
  
  // Create consolidated calculator instance for baƒü evi calculations
  const bagEviCalculator = new BagEviCalculator();
  
  // Create form validator instance
  const formValidator = new FormValidator();
  
  const [formData, setFormData] = useState<DetailedCalculationInput>({
    alan_m2: 0,
    arazi_vasfi: '', // Ba≈ülangƒ±√ßta bo≈ü olacak ki placeholder g√∂r√ºns√ºn
    emsal_turu: 'marjinal' // Default olarak marjinal (%20) se√ßili
  });

  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [araziTipleri, setAraziTipleri] = useState<AraziTipi[]>([]);
  const [araziTipleriLoading, setAraziTipleriLoading] = useState(true);
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [selectFocused, setSelectFocused] = useState(false);
  const [selectOpen, setSelectOpen] = useState(false);
  
  // Dikili alan kontrol√º i√ßin
  const [dikiliKontrolOpen, setDikiliKontrolOpen] = useState(false);
  const [dikiliKontrolSonucu, setDikiliKontrolSonucu] = useState<any>(null);
  


  // Typewriter efekti i√ßin
  const { displayedText } = useTypewriter('Arazi vasfƒ±nƒ±zƒ± se√ßiniz', 80);

  // External emsal t√ºr√º ile senkronizasyon
  useEffect(() => {
    if (emsalTuru && emsalTuru !== formData.emsal_turu) {
      setFormData(prev => ({ ...prev, emsal_turu: emsalTuru as 'marjinal' | 'mutlak_dikili' }));
    }
  }, [emsalTuru]);

  // API'den arazi tiplerini √ßek
  useEffect(() => {
    const fetchAraziTipleri = async () => {
      try {
        setAraziTipleriLoading(true);
        const response = await fetch('http://127.0.0.1:8000/api/calculations/arazi-tipleri/');
        const data = await response.json();
        
        if (data.success) {
          setAraziTipleri(data.data);
          // Placeholder g√∂r√ºn√ºr kalmasƒ± i√ßin otomatik se√ßimi kaldƒ±rƒ±ldƒ±
        } else {
          console.error('Arazi tipleri √ßekilemedi:', data.message);
        }
      } catch (error) {
        console.error('Arazi tipleri API hatasƒ±:', error);
      } finally {
        setAraziTipleriLoading(false);
      }
    };

    fetchAraziTipleri();
  }, []);

  // Custom event listener for opening dikili kontrol modal
  useEffect(() => {
    const handleOpenDikiliKontrol = () => {
      setDikiliKontrolOpen(true);
    };

    window.addEventListener('openDikiliKontrol', handleOpenDikiliKontrol);
    
    return () => {
      window.removeEventListener('openDikiliKontrol', handleOpenDikiliKontrol);
    };
  }, []);

  // üéØ Smart Auto-Detection Helper Fonksiyonlarƒ±
  const getSmartDetectionStatus = (fieldName: string) => {
    if (!dikiliKontrolSonucu) return null;
    
    if (dikiliKontrolSonucu.manualOverride && dikiliKontrolSonucu.overrideField === fieldName) {
      return 'manual';
    }
    
    if (dikiliKontrolSonucu.directTransfer) {
      return 'map';
    }
    
    return null;
  };

  const handleResetToMapValue = (fieldName: string) => {
    if (!dikiliKontrolSonucu?.originalMapValues) return;
    
    const originalValue = dikiliKontrolSonucu.originalMapValues[fieldName];
    if (originalValue !== undefined) {
      console.log(`üîÑ ${fieldName} harita deƒüerine geri d√∂nd√ºr√ºl√ºyor: ${originalValue}`);
      
      // Form deƒüerini g√ºncelle
      setFormData(prev => ({
        ...prev,
        [fieldName]: originalValue
      }));
      
      // Akƒ±llƒ± algƒ±lamayƒ± sƒ±fƒ±rla
      setDikiliKontrolSonucu((prev: any) => ({
        ...prev,
        directTransfer: true,
        manualOverride: false,
        overrideField: undefined
      }));
    }
  };

  const renderSmartDetectionFeedback = (fieldName: string) => {
    const status = getSmartDetectionStatus(fieldName);
    if (!status) return null;

    if (status === 'manual' && dikiliKontrolSonucu?.originalMapValues) {
      const originalValue = dikiliKontrolSonucu.originalMapValues[fieldName];
      
      return (
        <SmartDetectionFeedback 
          variant="manual"
          icon="‚úèÔ∏è"
          text={`Manuel deƒüer kullanƒ±lƒ±yor (Harita: ${originalValue?.toLocaleString()} m¬≤)`}
          onResetToMap={() => handleResetToMapValue(fieldName)}
        />
      );
    }

    if (status === 'map') {
      return (
        <SmartDetectionFeedback 
          variant="map"
          icon="üó∫Ô∏è"
          text="Harita verisi kullanƒ±lƒ±yor - Manuel deƒüi≈üiklik akƒ±llƒ± algƒ±lanacak"
        />
      );
    }

    return null;
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    console.log(`üîÑ CalculationForm - handleInputChange: ${name} = "${value}"`);
    
    // üéØ AKILLI ALGILA (√á√∂z√ºm 3): Harita verisi varken manuel deƒüer girilirse otomatik olarak manuel moda ge√ß
    const alanInputlari = ['alan_m2', 'dikili_alani', 'tarla_alani', 'zeytinlik_alani'];
    if (alanInputlari.includes(name) && dikiliKontrolSonucu?.directTransfer && value !== '') {
      const numericValue = Number(value);
      const currentMapValue = name === 'alan_m2' ? dikiliKontrolSonucu.dikiliAlan :  // alan_m2 de dikili alan deƒüerini kullanƒ±r
                             name === 'dikili_alani' ? dikiliKontrolSonucu.dikiliAlan :
                             name === 'tarla_alani' ? dikiliKontrolSonucu.tarlaAlani :
                             name === 'zeytinlik_alani' ? dikiliKontrolSonucu.zeytinlikAlani : 0;
      
      // Sadece deƒüer farklƒ±ysa akƒ±llƒ± algƒ±lamayƒ± tetikle
      if (numericValue !== currentMapValue) {
        console.log(`üìù AKILLI ALGILA: ${name} manuel olarak deƒüi≈ütirildi (${currentMapValue} ‚Üí ${numericValue})`);
        console.log(`üîÑ Harita verisi pasif ediliyor, manuel deƒüer √∂ncelikli hale getiriliyor`);
        
        setDikiliKontrolSonucu((prev: any) => ({
          ...prev,
          directTransfer: false, // Harita verisini pasif et
          manualOverride: true,  // Manuel deƒüer kullanƒ±ldƒ±ƒüƒ±nƒ± i≈üaretle
          overrideField: name,   // Hangi alan override edildiƒüini sakla
          originalMapValues: {   // Orijinal harita deƒüerlerini sakla (geri d√∂n√º≈ü i√ßin)
            ...prev.originalMapValues,
            alan_m2: prev.dikiliAlan || 0,      // alan_m2 i√ßin de dikili alan deƒüerini sakla
            dikili_alani: prev.dikiliAlan || 0,
            tarla_alani: prev.tarlaAlani || 0,
            zeytinlik_alani: prev.zeytinlikAlani || 0
          }
        }));
      }
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: (name === 'alan_m2' || name === 'silo_taban_alani_m2' || name === 'tarla_alani' || name === 'dikili_alani' || name === 'zeytinlik_alani' || name === 'zeytin_agac_sayisi' || name === 'tapu_zeytin_agac_adedi' || name === 'mevcut_zeytin_agac_adedi') ? Number(value) : value
    }));

    console.log(`‚úÖ CalculationForm - State updated for ${name}`);
    
    // Debug: G√ºncel formData state'ini log'la
    setTimeout(() => {
      console.log(`üìä CalculationForm - Current formData.arazi_vasfi: "${formData.arazi_vasfi}"`);
      console.log(`üìä CalculationForm - Should show Tarla+Zeytinlik inputs: ${formData.arazi_vasfi === 'Tarla + Zeytinlik'}`);
    }, 100);

    // Arazi vasfƒ± se√ßildiƒüinde dropdown'ƒ± kapat ve parent'a bildir
    if (name === 'arazi_vasfi' && value) {
      console.log(`üéØ CalculationForm - Arazi vasfƒ± se√ßildi: "${value}"`);
      setSelectOpen(false);
      // Parent component'a arazi vasfƒ± deƒüi≈ütiƒüini bildir
      onAraziVasfiChange?.(value);
    }

    // Clear validation error when user starts typing
    if (validationErrors[name]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Dikili alan kontrol√º handler'larƒ±
  const handleDikiliKontrolOpen = () => {
    setDikiliKontrolOpen(true);
  };

  const handleDikiliKontrolClose = () => {
    setDikiliKontrolOpen(false);
  };

  const handleDikiliKontrolSuccess = (result: any) => {
    setDikiliKontrolSonucu(result);
    console.log('üîç DEBUG - handleDikiliKontrolSuccess √ßaƒürƒ±ldƒ±');
    console.log('üîç DEBUG - result:', result);
    console.log('üîç DEBUG - mevcut formData.arazi_vasfi:', formData.arazi_vasfi);
    
    // üî• YENƒ∞: Temizleme i≈ülemi kontrol√º
    if (result?.clearAll === true) {
      console.log('üßπ Temizleme i≈ülemi algƒ±landƒ± - FormData sƒ±fƒ±rlanƒ±yor');
      setFormData(prev => ({
        ...prev,
        dikili_alani: 0,
        tarla_alani: 0,
        zeytinlik_alani: 0,
        alan_m2: formData.arazi_vasfi === 'Dikili vasƒ±flƒ±' ? 0 : prev.alan_m2
      }));
      
      // Validation hatalarƒ±nƒ± da temizle
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors.dikili_alani;
        delete newErrors.tarla_alani;
        delete newErrors.zeytinlik_alani;
        if (formData.arazi_vasfi === 'Dikili vasƒ±flƒ±') {
          delete newErrors.alan_m2;
        }
        return newErrors;
      });
      
      console.log('‚úÖ Form tamamen temizlendi - Harita verileri sƒ±fƒ±rlandƒ±');
      setDikiliKontrolOpen(false);
      return; // Temizleme i≈üleminde sonraki kodlarƒ± √ßalƒ±≈ütƒ±rma
    }
    
    // Doƒürudan aktarƒ±m (aƒüa√ß hesaplamasƒ± olmadan) veya ba≈üarƒ±lƒ± kontrol sonucu
    const isDirectTransfer = result?.directTransfer === true;
    const isSuccessfulControl = result?.dikiliAlanKontrolSonucu?.type === 'success' && 
                               result?.dikiliAlanKontrolSonucu?.yeterlilik?.yeterli === true;
    
    console.log('üîç DEBUG - isDirectTransfer:', isDirectTransfer);
    console.log('üîç DEBUG - isSuccessfulControl:', isSuccessfulControl);
    
    // Deƒüer aktarƒ±m ko≈üullarƒ±: Doƒürudan aktarƒ±m VEYA ba≈üarƒ±lƒ± kontrol
    // "Dikili vasƒ±flƒ±" i√ßin sadece dikiliAlan kontrol√º, 
    // "Tarla + Zeytinlik" i√ßin tarlaAlani ve zeytinlikAlani kontrol√º,
    // "‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f" i√ßin sadece dikiliAlan kontrol√º,
    // diƒüerleri i√ßin hem dikiliAlan hem tarlaAlani kontrol√º
    const hasRequiredAreas = formData.arazi_vasfi === 'Dikili vasƒ±flƒ±' 
      ? result?.dikiliAlan 
      : formData.arazi_vasfi === 'Tarla + Zeytinlik'
      ? (result?.tarlaAlani && result?.zeytinlikAlani)
      : formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f'
      ? result?.dikiliAlan
      : formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan tarla'
      ? result?.tarlaAlani
      : (result?.dikiliAlan && result?.tarlaAlani);
    
    console.log('üîç DEBUG - hasRequiredAreas hesaplama:');
    console.log('  - arazi_vasfi check:', formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f');
    console.log('  - result.dikiliAlan:', result?.dikiliAlan);
    console.log('  - hasRequiredAreas final:', hasRequiredAreas);
    
    const shouldEnterIfBlock = (isDirectTransfer || isSuccessfulControl) && hasRequiredAreas;
    console.log('üîç DEBUG - shouldEnterIfBlock:', shouldEnterIfBlock);
    
    if ((isDirectTransfer || isSuccessfulControl) && hasRequiredAreas) {
      console.log('üîç DEBUG - IF BLOCK ENTERED - Area transfer ba≈ülƒ±yor');
      
      const dikiliAlan = result.dikiliAlan; // Dikili alan deƒüeri
      const tarlaAlani = result.tarlaAlani; // Tarla alanƒ±
      const zeytinlikAlani = result.zeytinlikAlani; // Zeytinlik alanƒ±
      
      console.log('üîç DEBUG - Alan deƒüerleri:');
      console.log('  - dikiliAlan:', dikiliAlan);
      console.log('  - tarlaAlani:', tarlaAlani);
      console.log('  - zeytinlikAlani:', zeytinlikAlani);
      
      // "Dikili vasƒ±flƒ±" arazi tipi i√ßin √∂zel alan_m2 g√ºncellemesi
      if (formData.arazi_vasfi === 'Dikili vasƒ±flƒ±') {
        console.log('üîç DEBUG - Dikili vasƒ±flƒ± branch');
        setFormData(prev => ({
          ...prev,
          alan_m2: dikiliAlan, // Dikili vasƒ±flƒ± i√ßin alan_m2 = dikili alan
          dikili_alani: dikiliAlan,
          tarla_alani: tarlaAlani
        }));
        
        // Validation hatalarƒ±nƒ± temizle (alan_m2 dahil)
        setValidationErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors.alan_m2;
          delete newErrors.dikili_alani;
          delete newErrors.tarla_alani;
          return newErrors;
        });
        
        console.log(`üöÄ Dikili vasƒ±flƒ± i√ßin √∂zel aktarƒ±m:`);
        console.log(`  - alan_m2: ${dikiliAlan} m¬≤ (dikili alan)`);
        console.log(`  - dikili_alani: ${dikiliAlan} m¬≤`);
        console.log(`  - tarla_alani: ${tarlaAlani} m¬≤`);
      } else if (formData.arazi_vasfi === 'Tarla + Zeytinlik') {
        console.log('üîç DEBUG - Tarla + Zeytinlik branch');
        // "Tarla + Zeytinlik" arazi tipi i√ßin √∂zel aktarƒ±m
        setFormData(prev => ({
          ...prev,
          tarla_alani: tarlaAlani,
          zeytinlik_alani: zeytinlikAlani
        }));
        
        // Validation hatalarƒ±nƒ± temizle
        setValidationErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors.tarla_alani;
          delete newErrors.zeytinlik_alani;
          return newErrors;
        });
        
        console.log(`üöÄ Tarla + Zeytinlik i√ßin aktarƒ±m:`);
        console.log(`  - tarla_alani: ${tarlaAlani} m¬≤`);
        console.log(`  - zeytinlik_alani: ${zeytinlikAlani} m¬≤`);
      } else if (formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f') {
        console.log('üîç DEBUG - ‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f branch ENTERED');
        console.log('üîç DEBUG - setFormData √ßaƒürƒ±lƒ±yor, dikiliAlan:', dikiliAlan);
        console.log('üîç DEBUG - mevcut formData.dikili_alani (deƒüi≈ümeden √∂nce):', formData.dikili_alani);
        
        // "‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f" arazi tipi i√ßin √∂zel aktarƒ±m
        setFormData(prev => {
          console.log('üîç DEBUG - setFormData i√ßinde prev:', prev);
          const newData = {
            ...prev,
            dikili_alani: dikiliAlan // Sadece dikili alanƒ± g√ºncelle
          };
          console.log('üîç DEBUG - setFormData i√ßinde newData:', newData);
          return newData;
        });
        
        // Validation hatalarƒ±nƒ± temizle
        setValidationErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors.dikili_alani;
          console.log('üîç DEBUG - Validation errors temizlendi, dikili_alani hatasƒ± silindi');
          return newErrors;
        });
        
        console.log(`üöÄ ‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f i√ßin aktarƒ±m:`);
        console.log(`  - dikili_alani: ${dikiliAlan} m¬≤`);
        
        // Extra debug - check after state update (with timeout to allow state to settle)
        setTimeout(() => {
          console.log('üîç DEBUG - 100ms sonra formData kontrol√º (state g√ºncellendikten sonra)');
          console.log('üîç DEBUG - setFormData sonrasƒ± beklenen dikili_alani:', dikiliAlan);
        }, 100);
        
      } else {
        console.log('üîç DEBUG - Diƒüer arazi tipleri branch');
        // Diƒüer arazi tipleri i√ßin normal aktarƒ±m
        setFormData(prev => ({
          ...prev,
          dikili_alani: dikiliAlan,
          tarla_alani: tarlaAlani
        }));
        
        // Validation hatalarƒ±nƒ± temizle
        setValidationErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors.dikili_alani;
          delete newErrors.tarla_alani;
          return newErrors;
        });
      }
      
      console.log('üîç DEBUG - Area transfer tamamlandƒ±');
      
      // Konsol mesajlarƒ±
      if (isDirectTransfer) {
        if (formData.arazi_vasfi === 'Tarla + Zeytinlik') {
          console.log(`üöÄ Doƒürudan aktarƒ±m - Poligon verileri forma aktarƒ±ldƒ±:`);
          console.log(`  - Tarla alanƒ±: ${tarlaAlani} m¬≤`);
          console.log(`  - Zeytinlik alanƒ±: ${zeytinlikAlani} m¬≤`);
          console.log(`üìù Not: Bu arazi tipinde aƒüa√ß hesaplamasƒ± gerekmez`);
        } else if (formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f') {
          console.log(`üöÄ Doƒürudan aktarƒ±m - Poligon verileri forma aktarƒ±ldƒ±:`);
          console.log(`  - Dikili alan: ${dikiliAlan} m¬≤`);
          console.log(`üìù Not: Bu arazi tipinde sadece dikili alan bilgisi alƒ±nƒ±r`);
        } else {
          console.log(`üöÄ Doƒürudan aktarƒ±m - Poligon verileri forma aktarƒ±ldƒ±:`);
          console.log(`  - Dikili alan: ${dikiliAlan} m¬≤`);
          console.log(`  - Tarla alanƒ±: ${tarlaAlani} m¬≤`);
          console.log(`üìù Not: Aƒüa√ß hesaplamasƒ± yapƒ±lmadƒ±, sadece alan bilgileri aktarƒ±ldƒ±`);
        }
      } else {
        console.log(`‚úÖ Dikili alan kontrol√º ba≈üarƒ±lƒ± - Deƒüerler aktarƒ±ldƒ±:`);
        console.log(`  - Dikili alan: ${dikiliAlan} m¬≤`);
        console.log(`  - Tarla alanƒ±: ${tarlaAlani} m¬≤`);
        console.log(`üìä Aƒüa√ßlarƒ±n teorik kapladƒ±ƒüƒ± alan: ${result?.dikiliAlanKontrolSonucu?.alanBilgisi?.kaplanAlan} m¬≤ (yoƒüunluk kontrol√º i√ßin)`);
        console.log(`üéØ Yeterlilik oranƒ±: %${result?.dikiliAlanKontrolSonucu?.yeterlilik?.oran?.toFixed(1)} (min: %${result?.dikiliAlanKontrolSonucu?.yeterlilik?.minimumOran})`);
      }
    } else {
      console.log('üîç DEBUG - IF BLOCK SKIPPED - Area transfer yapƒ±lmadƒ±');
      console.log('üîç DEBUG - Sebep analizi:');
      console.log('  - (isDirectTransfer || isSuccessfulControl):', (isDirectTransfer || isSuccessfulControl));
      console.log('  - hasRequiredAreas:', hasRequiredAreas);
      console.log('  - Combined condition:', (isDirectTransfer || isSuccessfulControl) && hasRequiredAreas);
      console.log('‚ùå Dikili alan kontrol√º ba≈üarƒ±sƒ±z - Yeterlilik kriteri saƒülanmadƒ±, deƒüer aktarƒ±mƒ± yapƒ±lmadƒ±');
    }
  };

  const validateForm = (): boolean => {
    // Use the separated FormValidator
    const validationResult = formValidator.validateForm(formData, calculationType);
    setValidationErrors(validationResult.errors);
    return validationResult.isValid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üöÄ CalculationForm - handleSubmit triggered');
    
    if (!validateForm()) {
      console.log('‚ùå CalculationForm - Form validation failed');
      return;
    }

    setIsLoading(true);
    setError(null);
    console.log('üìû CalculationForm - Calling onCalculationStart');
    onCalculationStart();
    console.log('‚úÖ CalculationForm - onCalculationStart called');

    try {
      // calculationType'ƒ± API service key formatƒ±na d√∂n√º≈üt√ºr (- yerine _)
      const calculationKey = calculationType.replace(/-/g, '_');
      console.log(`üîÑ CalculationType: ${calculationType} ‚Üí Key: ${calculationKey}`);
      console.log('üìã Available calculations:', Object.keys(apiService.calculations));
      console.log('üîç Looking for key:', calculationKey);
      console.log('‚úÖ Key exists?', calculationKey in apiService.calculations);
      console.log('üéØ Full apiService.calculations object:', apiService.calculations);
      
      // ƒ∞pek b√∂cek√ßiliƒüi i√ßin dut_bahcesi_var_mi alanƒ±nƒ± default true yap
      const finalFormData = { ...formData };
      if (calculationType === 'ipek-bocekciligi' && finalFormData.dut_bahcesi_var_mi === undefined) {
        finalFormData.dut_bahcesi_var_mi = true;
        console.log('üå≥ ƒ∞pek b√∂cek√ßiliƒüi i√ßin dut_bahcesi_var_mi default true olarak ayarlandƒ±');
      }

      // Baƒü evi i√ßin konsolide hesaplama motoru ile form verisini hazƒ±rla
      if (calculationType === 'bag-evi') {
        const bagEviFormData = {
          calculationType,
          arazi_vasfi: formData.arazi_vasfi,
          alan_m2: formData.alan_m2,
          tarla_alani: formData.tarla_alani,
          dikili_alani: formData.dikili_alani,
          zeytinlik_alani: formData.zeytinlik_alani,
          zeytin_agac_sayisi: formData.zeytin_agac_sayisi,
          zeytin_agac_adedi: formData.zeytin_agac_adedi,
          tapu_zeytin_agac_adedi: formData.tapu_zeytin_agac_adedi,
          mevcut_zeytin_agac_adedi: formData.mevcut_zeytin_agac_adedi,
          manuel_kontrol_sonucu: dikiliKontrolSonucu || formData.manuel_kontrol_sonucu,
          latitude: formData.latitude,
          longitude: formData.longitude
        };

        // Konsolide hesaplama motoru ile backend i√ßin hazƒ±rla
        const preparedData = bagEviCalculator.prepareFormDataForBackend(bagEviFormData);
        
        // Hazƒ±rlanan verileri finalFormData'ya aktar
        Object.assign(finalFormData, preparedData);
        
        console.log('üçá Baƒü evi i√ßin konsolide hesaplama motoru kullanƒ±ldƒ±');
        console.log('üîÑ Arazi vasfƒ±:', formData.arazi_vasfi);
        console.log('üìä Hazƒ±rlanan veriler:', preparedData);
      }

      // Se√ßilen koordinat bilgisini form dataya ekle
      if (selectedCoordinate) {
        finalFormData.latitude = selectedCoordinate.lat;
        finalFormData.longitude = selectedCoordinate.lng;
        console.log('üìç Koordinat bilgisi form dataya eklendi:', selectedCoordinate);
      }

      // Emsal t√ºr√º bilgisini ekle (baƒü evi hari√ß)
      if (calculationType !== 'bag-evi') {
        finalFormData.emsal_turu = formData.emsal_turu || 'marjinal';
        console.log(`üìê Emsal t√ºr√º eklendi: ${finalFormData.emsal_turu} (${finalFormData.emsal_turu === 'marjinal' ? '%20' : '%5'})`);
      }
      
      // Explicitly debug each step
      console.log('üî¨ Debug Info:');
      console.log('- calculationType:', calculationType);
      console.log('- calculationKey:', calculationKey);
      console.log('- typeof calculationKey:', typeof calculationKey);
      console.log('- apiService:', apiService);
      console.log('- apiService.calculations:', apiService.calculations);
      console.log('- Object.keys(apiService.calculations):', Object.keys(apiService.calculations));
      console.log('- Has solucan_tesisi key?:', 'solucan_tesisi' in apiService.calculations);
      console.log('- apiService.calculations.solucan_tesisi:', apiService.calculations.solucan_tesisi);
      
      const calculationFunction = apiService.calculations[calculationKey as keyof typeof apiService.calculations];
      console.log('üé≤ calculationFunction:', calculationFunction);
      
      if (!calculationFunction) {
        console.error(`‚ùå Function not found for key: ${calculationKey}`);
        console.error('‚ùå Available keys:', Object.keys(apiService.calculations));
        throw new Error(`Hesaplama t√ºr√º desteklenmiyor: ${calculationType}`);
      }
      const apiResult = await calculationFunction(finalFormData);
      console.log('üéØ API Result:', apiResult);
      
      // Debug: Hara ve ƒ∞pek B√∂cek√ßiliƒüi response'larƒ±nƒ± log'la
      if (calculationType === 'hara' || calculationType === 'ipek-bocekciligi') {
        console.log(`${calculationType} API Response:`, JSON.stringify(apiResult, null, 2));
      }
      
      // ƒ∞pek b√∂cek√ßiliƒüi i√ßin √∂zel response mapping
      if (calculationType === 'ipek-bocekciligi' && (apiResult as any).sonuc && typeof (apiResult as any).sonuc === 'object') {
        const ipekResult = (apiResult as any).sonuc;
        const result: CalculationResult = {
          success: (apiResult as any).success || false,
          message: ipekResult.mesaj_metin || (apiResult as any).message || 'ƒ∞pek b√∂cek√ßiliƒüi hesaplama tamamlandƒ±',
          data: {
            // ƒ∞pek b√∂cek√ßiliƒüi sonuclarƒ±nƒ± aktar
            ...ipekResult,
            // Ana mesajƒ± ayarla
            ana_mesaj: ipekResult.mesaj_metin || ipekResult.mesaj || 'ƒ∞pek b√∂cek√ßiliƒüi hesaplama tamamlandƒ±',
            // HTML mesajƒ±nƒ± ayarla
            mesaj: ipekResult.mesaj || '',
            // Diƒüer alanlarƒ± map et
            alan_m2: formData.alan_m2,
            maksimum_kapasite: ipekResult.maksimum_taban_alani,
            maksimum_taban_alani: ipekResult.maksimum_taban_alani,
            maksimum_yapilasma_alani_m2: ipekResult.maksimum_yapilasma_alani_m2
          }
        };
        
        console.log('üîÑ ƒ∞pek B√∂cek√ßiliƒüi Transformed Result:', result);
        onResult(result);
        return;
      }
      
      // Backend response'unu frontend CalculationResult formatƒ±na d√∂n√º≈üt√ºr
      const result: CalculationResult = {
        success: (apiResult as any).success || false,
        message: (apiResult as any).sonuc || (apiResult as any).message || 'Hesaplama tamamlandƒ±',
        data: {
          // Backend'den gelen t√ºm verileri aktar
          ...(apiResult as any),
          // Detaylar varsa onlarƒ± da √ºst seviyeye ta≈üƒ±
          ...((apiResult as any).detaylar || {}),
          // ƒ∞zin durumunu doƒüru ≈üekilde map et - hububat silo, tarƒ±msal depo, lisanslƒ± depo, yƒ±kama tesisi, kurutma tesisi, meyve-sebze-kurutma, zeytinyagi-fabrikasi, su-depolama, su-kuyulari, zeytinyagi-uretim-tesisi, soguk-hava-deposu, sut-sigirciligi, besi-sigirciligi, agil-kucukbas, k√ºmes t√ºrleri, kaz-√∂rdek, hara, ipek b√∂cek√ßiliƒüi, evcil hayvan, sera ve baƒü evi i√ßin √∂zel handling
          izin_durumu: (calculationType === 'hububat-silo' || calculationType === 'tarimsal-depo' || calculationType === 'lisansli-depo' || calculationType === 'yikama-tesisi' || calculationType === 'kurutma-tesisi' || calculationType === 'meyve-sebze-kurutma' || calculationType === 'zeytinyagi-fabrikasi' || calculationType === 'su-depolama' || calculationType === 'su-kuyulari' || calculationType === 'zeytinyagi-uretim-tesisi' || calculationType === 'soguk-hava-deposu' || calculationType === 'sut-sigirciligi' || calculationType === 'besi-sigirciligi' || calculationType === 'agil-kucukbas' || calculationType === 'kumes-gezen' || calculationType === 'kumes-hindi' || calculationType === 'kumes-yumurtaci' || calculationType === 'kumes-etci' || calculationType === 'kaz-ordek' || calculationType === 'hara' || calculationType === 'ipek-bocekciligi' || calculationType === 'evcil-hayvan' || calculationType === 'sera' || calculationType === 'bag-evi')
            ? (apiResult as any).data?.izin_durumu || (apiResult as any).results?.izin_durumu || (apiResult as any).izin_durumu || (apiResult as any).detaylar?.izin_durumu || 'izin_verilemez'
            : (apiResult as any).detaylar?.izin_durumu || 
              ((apiResult as any).sonuc?.includes('YAPILABƒ∞Lƒ∞R') ? 'izin_verilebilir' : 'izin_verilemez'),
          // Ana mesajƒ± ayarla - Baƒü evi i√ßin √∂zel mapping
          ana_mesaj: calculationType === 'bag-evi' 
            ? (apiResult as any).mesaj || (apiResult as any).data?.mesaj || (apiResult as any).sonuc || (apiResult as any).message
            : (apiResult as any).sonuc || (apiResult as any).message,
          // HTML mesajƒ±nƒ± ayarla - aƒüƒ±l, k√ºmes t√ºrleri, kaz-√∂rdek, hara, ipek b√∂cek√ßiliƒüi, evcil hayvan, s√ºt sƒ±ƒüƒ±rcƒ±lƒ±ƒüƒ±, besi sƒ±ƒüƒ±rcƒ±lƒ±ƒüƒ±, sera, kurutma tesisi ve baƒü evi i√ßin results.html_mesaj √∂ncelikli
          mesaj: (calculationType === 'agil-kucukbas' || calculationType === 'kumes-gezen' || calculationType === 'kumes-hindi' || calculationType === 'kumes-yumurtaci' || calculationType === 'kumes-etci' || calculationType === 'kaz-ordek' || calculationType === 'hara' || calculationType === 'ipek-bocekciligi' || calculationType === 'evcil-hayvan' || calculationType === 'sut-sigirciligi' || calculationType === 'besi-sigirciligi' || calculationType === 'sera' || calculationType === 'kurutma-tesisi' || calculationType === 'bag-evi')
            ? (apiResult as any).results?.html_mesaj || (apiResult as any).results?.mesaj || (apiResult as any).html_mesaj || (apiResult as any).mesaj || (apiResult as any).data?.html_mesaj || (apiResult as any).data?.mesaj
            : (apiResult as any).mesaj || (apiResult as any).html_mesaj || (apiResult as any).data?.html_mesaj || (apiResult as any).results?.html_mesaj,
          // Diƒüer √∂nemli alanlarƒ± map et
          alan_m2: (apiResult as any).detaylar?.arazi_alani || (apiResult as any).data?.arazi_alani || formData.alan_m2,
          maksimum_kapasite: (apiResult as any).maksimum_kapasite,
          maksimum_taban_alani: (apiResult as any).maksimum_taban_alani,
          uretim_hatti_alani: (apiResult as any).detaylar?.uretim_hatti_alani,
          toplam_mustemilat_alani: (apiResult as any).detaylar?.toplam_mustemilat_alani,
          // Hububat silo i√ßin √∂zel alanlar
          maksimum_emsal: (apiResult as any).detaylar?.maksimum_emsal,
          kalan_emsal: (apiResult as any).detaylar?.kalan_emsal,
          maks_idari_teknik_alan: (apiResult as any).detaylar?.maks_idari_teknik_alan
        }
      };
      
      console.log('üîÑ Transformed Result:', result);
      console.log('üìû CalculationForm - Calling onResult with:', result);
      onResult(result);
      console.log('‚úÖ CalculationForm - onResult called successfully');
    } catch (err) {
      console.log('‚ùå CalculationForm - Error occurred:', err);
      const errorMessage = err instanceof Error ? err.message : 'Hesaplama sƒ±rasƒ±nda bir hata olu≈ütu';
      setError(errorMessage);
      
      const errorResult: CalculationResult = {
        success: false,
        message: errorMessage,
        data: {
          izin_durumu: 'izin_verilemez',
          ana_mesaj: errorMessage
        }
      };
      
      console.log('üìû CalculationForm - Calling onResult with error:', errorResult);
      onResult(errorResult);
      console.log('‚úÖ CalculationForm - onResult called with error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <FormContainer>
      <FormTitle>
        {structureTypeLabels[calculationType] || calculationType} Hesaplama
      </FormTitle>

      <FormContent>
        {error && <ErrorMessage>{error}</ErrorMessage>}



        <form onSubmit={handleSubmit}>
          {/* Temel Bilgiler */}
          <FormSectionComponent title="üìä Temel Bilgiler">
            <FormGrid>
              {/* Baƒü evi dƒ±≈üƒ±ndaki hesaplamalar i√ßin genel alan inputu */}
              {calculationType !== 'bag-evi' && (
                <FormField
                  label="Alan (m¬≤)"
                  name="alan_m2"
                  type="number"
                  value={formData.alan_m2 || ''}
                  onChange={handleInputChange}
                  placeholder="√ñrn: 5000"
                  min="1"
                  max="200000"
                  step="1"
                  required
                  error={validationErrors.alan_m2}
                />
              )}

              <FormGroup>
                <Label>
                  Arazi Vasfƒ± <RequiredIndicator>*</RequiredIndicator>
                </Label>
                <AnimatedSelectContainer>
                  <AnimatedSelect
                    name="arazi_vasfi"
                    value={formData.arazi_vasfi}
                    onChange={handleInputChange}
                    onFocus={() => setSelectFocused(true)}
                    onBlur={() => {
                      setSelectFocused(false);
                      setSelectOpen(false);
                    }}
                    onMouseDown={() => setSelectOpen(true)}
                    onClick={() => setSelectOpen(true)}
                    required
                    disabled={araziTipleriLoading}
                    $hasValue={!!formData.arazi_vasfi}
                  >
                    {araziTipleriLoading ? (
                      <option>Arazi tipleri y√ºkleniyor...</option>
                    ) : (
                      <>
                        <option value="" disabled style={{ display: 'none' }}>
                          {/* Gizli placeholder option */}
                        </option>
                        {araziTipleri.map((araziTipi: AraziTipi) => (
                          <option key={araziTipi.id} value={araziTipi.ad}>
                            {araziTipi.ad}
                          </option>
                        ))}
                      </>
                    )}
                  </AnimatedSelect>
                  
                  {/* Animasyonlu placeholder */}
                  <TypewriterPlaceholder 
                    $show={!formData.arazi_vasfi && !selectOpen && !araziTipleriLoading}
                  >
                    {displayedText}
                    {displayedText.length < 'Arazi vasfƒ±nƒ±zƒ± se√ßiniz'.length && (
                      <span className="cursor">|</span>
                    )}
                  </TypewriterPlaceholder>
                </AnimatedSelectContainer>
                {validationErrors.arazi_vasfi && (
                  <ErrorMessage>{validationErrors.arazi_vasfi}</ErrorMessage>
                )}
              </FormGroup>

              {/* Alan Kontrol Butonlarƒ± - Konsolide Edilmi≈ü */}
              {calculationType === 'bag-evi' && (
                formData.arazi_vasfi === 'Tarla + herhangi bir dikili vasƒ±flƒ±' ||
                formData.arazi_vasfi === 'Dikili vasƒ±flƒ±' ||
                formData.arazi_vasfi === 'Tarla + Zeytinlik' ||
                formData.arazi_vasfi === 'Zeytin aƒüa√ßlƒ± + herhangi bir dikili vasƒ±f' ||
                formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan tarla' ||
                formData.arazi_vasfi === '‚Ä¶ Adetli Zeytin Aƒüacƒ± bulunan + herhangi bir dikili vasƒ±f'
              ) && (
                <AlanKontrolButtons
                  dikiliKontrolSonucu={dikiliKontrolSonucu}
                  onOpenDikiliKontrol={handleDikiliKontrolOpen}
                  formData={formData}
                />
              )}
            </FormGrid>

            {/* Emsal T√ºr√º Se√ßimi artƒ±k ResultDisplay bile≈üeninde */}
          </FormSectionComponent>

          {/* √ñzel Parametreler */}
          {(calculationType === 'hububat-silo' || calculationType === 'ipek-bocekciligi' || calculationType === 'bag-evi') && (
            <FormSectionComponent title="‚öôÔ∏è √ñzel Parametreler">
              <FormGrid>
                {/* Hububat silo i√ßin √∂zel alan */}
                {calculationType === 'hububat-silo' && (
                  <FormField
                    label="Planlanan Silo Taban Alanƒ± (m¬≤)"
                    name="silo_taban_alani_m2"
                    type="number"
                    value={formData.silo_taban_alani_m2 || ''}
                    onChange={handleInputChange}
                    placeholder="√ñrn: 1000"
                    min="1"
                    max="200000"
                    step="1"
                    required
                    error={validationErrors.silo_taban_alani_m2}
                  />
                )}

                {/* ƒ∞pek b√∂cek√ßiliƒüi i√ßin √∂zel alan */}
                {calculationType === 'ipek-bocekciligi' && (
                  <FormGroup>
                    <Label style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <input
                        type="checkbox"
                        name="dut_bahcesi_var_mi"
                        checked={formData.dut_bahcesi_var_mi !== undefined ? formData.dut_bahcesi_var_mi : true}
                        onChange={(e) => {
                          setFormData(prev => ({
                            ...prev,
                            dut_bahcesi_var_mi: e.target.checked
                          }));
                        }}
                      />
                      Arazide dut bah√ßesi var mƒ±? <RequiredIndicator>*</RequiredIndicator>
                    </Label>
                    <div style={{ fontSize: '14px', color: '#666', marginTop: '4px' }}>
                      ƒ∞pek b√∂cek√ßiliƒüi tesisi i√ßin arazide dut bah√ßesi bulunmasƒ± zorunludur.
                    </div>
                  </FormGroup>
                )}

                {/* Baƒü evi i√ßin √∂zel alanlar - Modular component */}
                {calculationType === 'bag-evi' && (
                  <BagEviFormFields
                    formData={formData}
                    validationErrors={validationErrors}
                    onInputChange={handleInputChange}
                    renderSmartDetectionFeedback={renderSmartDetectionFeedback}
                  />
                )}
              </FormGrid>
            </FormSectionComponent>
          )}

          {/* Hesaplama Butonu */}
          <SubmitButton
            type="submit"
            $isLoading={isLoading}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <span>‚è≥</span>
                Hesaplanƒ±yor...
              </>
            ) : (
              <>
                <span>üßÆ</span>
                Hesapla
              </>
            )}
          </SubmitButton>
        </form>
      </FormContent>

      {/* Alan Kontrol√º Paneli */}
      <AlanKontrol
        isOpen={dikiliKontrolOpen}
        onClose={handleDikiliKontrolClose}
        onSuccess={handleDikiliKontrolSuccess}
        alanTipi="dikiliAlan"
        araziVasfi={formData.arazi_vasfi || ''}
        initialDikiliAlan={
          formData.arazi_vasfi === 'Dikili vasƒ±flƒ±' 
            ? (formData.alan_m2 || 0) 
            : (formData.dikili_alani || 0)
        }
        initialTarlaAlani={formData.tarla_alani || 0}
      />
    </FormContainer>
  );
};

export default CalculationForm;
